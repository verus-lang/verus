(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(declare-const non_linear_encoding Bool)
(axiom
 (=> non_linear_encoding
  (forall ((x Int) (y Int)) (!
   (= (Mul x y) (* x y))
   :pattern ((Mul x y))
   :qid
   prelude_mul
   :skolemid
   skolem_prelude_mul
))))
(axiom
 (=> non_linear_encoding
  (forall ((x Int) (y Int)) (!
   (= (EucDiv x y) (div x y))
   :pattern ((EucDiv x y))
   :qid
   prelude_eucdiv
   :skolemid
   skolem_prelude_eucdiv
))))
(axiom
 (=> non_linear_encoding
  (forall ((x Int) (y Int)) (!
   (= (EucMod x y) (mod x y))
   :pattern ((EucMod x y))
   :qid
   prelude_eucmod
   :skolemid
   skolem_prelude_eucmod
))))
